using UnityEngine;

namespace VoxelLUT {

    /**
     * Abstract class which all block rendering types will
     * extend. Has some default helper functionality and forces
     * blocks to implement certain functions.
     */
    public abstract class BlockVisual {

        /**
         * This represents the default voxel type with rounded edges
         * look during rendering
         */
        protected static readonly int[] _DEFAULT_TRIANGLES = 
        {
            // top face
            Block.V12, Block.V23, Block.V34,
            Block.V12, Block.V34, Block.V14,
            // back face
            Block.V23, Block.V26, Block.V67,
            Block.V23, Block.V67, Block.V37,
            // right face
            Block.V34, Block.V37, Block.V78,
            Block.V34, Block.V78, Block.V48,
            // front face
            Block.V14, Block.V48, Block.V58,
            Block.V14, Block.V58, Block.V15,
            // left face
            Block.V12, Block.V15, Block.V56,
            Block.V12, Block.V56, Block.V26,
            // bottom face
            Block.V58, Block.V78, Block.V67,
            Block.V58, Block.V67, Block.V56,
            // corners
            Block.V12, Block.V14, Block.V15,
            Block.V21, Block.V26, Block.V23,
            Block.V32, Block.V34, Block.V37,
            Block.V41, Block.V48, Block.V43,
            Block.V51, Block.V58, Block.V56,
            Block.V62, Block.V67, Block.V65,
            Block.V73, Block.V76, Block.V78,
            Block.V84, Block.V87, Block.V85
        };

        public abstract int[] Triangles { get; }

        /**
         * Get the number of triangles that is being generated by this
         * particular block
         */
        public int Count {
            get {
                return Triangles.Length;
            }
        }

        /**
         * Quick index accessor as an array
         */
        public int this[int index] { 
            get {
                return Triangles[index];
            }
        }

        /**
         * Can be used to quickly visualize the triangles as Gizmos. Only
         * available in Editor mode. Function will be empty once code has been built
         */
        public void OnDebug() {
#if UNITY_EDITOR
            Color oldColor = Gizmos.color;
            Gizmos.color = Color.blue;

            int[] tris = Triangles;

            for (int i = 0; i < tris.Length; i+=3) {
                Gizmos.DrawLine(Block.Get(tris[i]), Block.Get(tris[i + 1]));
                Gizmos.DrawLine(Block.Get(tris[i + 1]), Block.Get(tris[i + 2]));
                Gizmos.DrawLine(Block.Get(tris[i + 2]), Block.Get(tris[i]));
            }

            Gizmos.color = Color.green;

            for (int i = 0; i < tris.Length; i ++) {
                Gizmos.DrawSphere(Block.Get(tris[i]), 0.02f);
            }

            Gizmos.color = oldColor;
#endif
        }
    }
}
