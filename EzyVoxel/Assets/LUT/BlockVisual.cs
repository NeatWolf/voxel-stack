using UnityEngine;
using System.Collections.Generic;

namespace VoxelLUT {

    /**
     * Abstract class which all block rendering types will
     * extend. Has some default helper functionality and forces
     * blocks to implement certain functions.
     */
    public abstract class BlockVisual {

        /**
         * This represents the default voxel type with rounded edges
         * look during rendering
         */
        protected static readonly int[] _DEFAULT_TRIANGLES =
        {
            // top triangles
            Up.v12.Index(), Up.v23.Index(), Up.v34.Index(),
            Up.v12.Index(), Up.v34.Index(), Up.v14.Index(),
            // bottom triangles
            Down.v12.Index(), Down.v23.Index(), Down.v34.Index(),
            Down.v12.Index(), Down.v34.Index(), Down.v14.Index(),
            // left triangles
            Left.v12.Index(), Left.v23.Index(), Left.v34.Index(),
            Left.v12.Index(), Left.v34.Index(), Left.v14.Index(),
            // right triangles
            Right.v12.Index(), Right.v23.Index(), Right.v34.Index(),
            Right.v12.Index(), Right.v34.Index(), Right.v14.Index(),
            // front triangles
            Front.v12.Index(), Front.v23.Index(), Front.v34.Index(),
            Front.v12.Index(), Front.v34.Index(), Front.v14.Index(),
            // back triangles
            Back.v12.Index(), Back.v23.Index(), Back.v34.Index(),
            Back.v12.Index(), Back.v34.Index(), Back.v14.Index(),
            // corner 1
            Up.v12.Index(), Right.v23.Index(), Up.v23.Index(),
            // corner 2
            Up.v23.Index(), Right.v14.Index(), Up.v34.Index(),
            // corner 3
            Up.v34.Index(), Front.v14.Index(), Up.v14.Index(),
            // corner 4
            Up.v14.Index(), Left.v14.Index(), Up.v12.Index(),
            // corner 5
            Down.v12.Index(), Front.v23.Index(), Down.v23.Index(),
            // corner 6
            Down.v23.Index(), Right.v23.Index(), Down.v34.Index(),
            // corner 7
            Down.v34.Index(), Back.v14.Index(), Down.v14.Index(),
            // corner 8
            Down.v14.Index(), Front.v14.Index(), Down.v12.Index()
        };

        public abstract int[] Triangles { get; }

        /**
         * Fill the provided array with triangle data
         */
        public void FillTriangles(List<int> tris, int offset) {
            int[] triangles = Triangles;
            int len = triangles.Length;

            if (len == 0) {
                return;
            }

            for (int i = 0; i < len; i++) {
                tris.Add(triangles[i] + offset);
            }
        }

        /**
         * Get the number of triangles that is being generated by this
         * particular block
         */
        public int Count {
            get {
                return Triangles.Length;
            }
        }

        /**
         * Quick index accessor as an array
         */
        public int this[int index] { 
            get {
                return Triangles[index];
            }
        }

        /**
         * Can be used to quickly visualize the triangles as Gizmos. Only
         * available in Editor mode. Function will be empty once code has been built
         */
        public void OnDebug() {
#if UNITY_EDITOR
            Color oldColor = Gizmos.color;
            Gizmos.color = Color.blue;

            int[] tris = Triangles;

            for (int i = 0; i < tris.Length; i+=3) {
                Gizmos.DrawLine(Block.Get(tris[i]), Block.Get(tris[i + 1]));
                Gizmos.DrawLine(Block.Get(tris[i + 1]), Block.Get(tris[i + 2]));
                Gizmos.DrawLine(Block.Get(tris[i + 2]), Block.Get(tris[i]));
            }

            Gizmos.color = Color.green;

            for (int i = 0; i < tris.Length; i ++) {
                Gizmos.DrawSphere(Block.Get(tris[i]), 0.02f);
            }

            Gizmos.color = oldColor;
#endif
        }
    }
}
